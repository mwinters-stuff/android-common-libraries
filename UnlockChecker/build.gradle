apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

buildscript {
  repositories {
    maven { url rootProject.ext.localMaven }
  }
  dependencies {
    classpath rootProject.ext.gradlePlugin
  }
}


repositories {
  maven { url rootProject.ext.localMaven }
}
dependencies {
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile fileTree(dir: 'libs', include: '*.jar')
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    targetSdkVersion rootProject.ext.targetSdkVersion
    minSdkVersion rootProject.ext.minSdkVersion

    versionCode rootProject.ext.buildNumber
    versionName rootProject.ext.version
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }


}


task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.sourceFiles
}

//Execute "gradle clean jarRelease" to cook jar.
android.libraryVariants.all { variant ->
  def name = variant.buildType.name
  if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
    return; // Skip debug builds.
  }

}

// To publish to maven local execute "gradle clean build publishToMavenLocal"
// To publish to nexus execute "gradle clean build publish"
android.libraryVariants
publishing {
  publications {
    maven(MavenPublication) {
        artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
      artifactId project.name
      groupId rootProject.ext.group
      version android.defaultConfig.versionName

      artifact androidSourcesJar {
        classifier "sources"
      }
    }
  }

  repositories {
    maven {  url rootProject.ext.localMavenPublish }
  }
}

